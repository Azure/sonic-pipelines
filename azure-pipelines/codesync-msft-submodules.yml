pr: none
trigger: none

pool: sonic-ubuntu-1c
variables:
  - group: sonicbld
steps:
  - checkout: self
    clean: true
  - bash: |
      set -ex
      sudo apt update
      sudo apt install -y gh jq
      curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      git config --global user.email "sonicbld@microsoft.com"
      git config --global user.name "Sonic Automation"
      git config --global pull.rebase false
      echo $TOKEN | gh auth login --with-token
      echo $AZURE_DEVOPS_EXT_PAT | az devops login

      repos=$(for i in $(cat azure-pipelines/codesync.json | jq .[] -r); do echo $i | sed 's#src/##'; done | sort -u)
      [ -z $repos ] && exit 1
      for repo in $repos; do
        sudo rm -rf $repo
        git clone https://github.com/sonic-net/$repo
        cd $repo
        git remote add base https://github.com/Azure/$repo.msft
        git remote update
        cd ..
        sleep 2
      done
    env:
      TOKEN: $(GITHUB-TOKEN)
      AZURE_DEVOPS_EXT_PAT: $(MSAZURE-TOKEN)
    displayName: Setup env
  - bash: |
      set -ex
      repos=$(for i in $(cat azure-pipelines/codesync.json | jq .[] -r); do echo $i | sed 's#src/##'; done | sort -u)
      for repo in $repos; do
        cd $repo
        echo "====$repo===="
        branches=$(cat azure-pipelines/codesync.json | jq -r keys[])
        for branch in $branches; do
          if cat azure-pipelines/codesync.json | jq -r ".\"$branch\"" | grep -v $repo; then
            continue
          fi
          echo "    ===$branch==="
          git ls-remote --exit-code origin refs/heads/$branch || { echo "        ==no branch: origin=="; continue; }
          git ls-remote --exit-code base refs/heads/$branch || { echo "        ==no branch: base=="; continue; }
          git branch -D test || true
          git checkout -b test
          git branch -D $branch || true
          git checkout -b $branch --track base/$branch
          git reset HEAD --hard
          git clean -xdff
          git status | grep "^nothing to commit, working tree clean" || { echo "        ==git not clean=="; continue; }
          prehead=$(git log -n 1 --pretty=format:'%H')
          git pull origin $branch --no-edit || true
          git status
          if git status | grep "You have unmerged paths";then
            echo "        ==conflict!=="
            # code conflict, send alert TODO
            continue
            CommitID=$(git log $prehead..HEAD --merge --pretty=format:'%H'  | tail -n 1)
            description="<h1>Please merge $CommitID into $repo.Do not Cherry-pick!!!</h1>"
            description="code conflict: sonic-net/$repo:$branch -> Azure/$repo.msft:$branch<br>"
            description+=$(git log $prehead..HEAD --merge --pretty=format:'%h -%d %s (%cs) [%aN]')
            assign="Gen-Hwa Chiang <gechiang@microsoft.com>"
            # check if the workitem already exist
            az boards work-item update --org https://dev.azure.com/mssonic/ --id $ADO_ID --discussion "$description" -f "Custom Field 1=type_A"
            git merge --abort
            continue
          fi
          head=$(git log -n 1 --pretty=format:'%H')
          if [[ $prehead == $head ]];then
            echo "        ==No change after merging=="
            continue
          fi
          echo "        ==Diff logs=="
          git log $prehead..HEAD --graph --pretty=format:'%h -%d %s (%cs) [%aN]' | xargs -i echo "          {}"
          body=$(git log $prehead..HEAD --graph --pretty=format:'%h -%d %s (%cs) [%aN]')
          body='```<br>'$body'<br>```'
          # push code
          git push https://mssonicbld:$TOKEN@github.com/mssonicbld/$repo.msft HEAD:sonicbld/$branch-merge -f
          # craete PR
          url_=$(gh pr create -R Azure/$repo.msft -H mssonicbld:sonicbld/$branch-merge -B $branch -t "[code sync] Merge code from sonic-net/$repo:$branch to $branch" -b "$body" 2>&1; rc=$?)
          url=$(echo "$url_" | grep -Eo https://github.com/Azure/$repo.msft/pull/[0-9]* )
          if echo $url_ | grep "already exists:"; then
            gh pr edit $url -b "$body"
          fi
          sleep 10
          for (( c=1; c<=RETRY_COUNT; c++ ));do
            echo "count: $c"
            sleep 60
            gh pr checks $url | grep https || continue
            gh pr checks $url | grep https | grep pending && continue || break
          done
          gh pr merge $url --merge --admin
        done
      done
    env:
      TOKEN: $(GITHUB-TOKEN)
      AZURE_DEVOPS_EXT_PAT: $(MSAZURE-TOKEN)
      RETRY_COUNT: $(RETRY_COUNT)
    displayName: 'code sync'

